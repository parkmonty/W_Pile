1. Numpy
  - 일반 list에 비해 빠르고, 메모리 효율적
  - 반복문 없이 데이터 배열에 대한 처리를 지원
  - 선형대수와 관련된 다양한 기능을 제공
  - C, C++, 포트란 등의 언어와 통합 가능

  1) import numpy as np
    - numpy의 호출 방법
    - 일반적으로 np라는 alias(별칭) 이용해 호출 (특별한 이유는 없음, 세계적인 약속)

  2) Array creation
    - test_array = np.array([1, 4, 5, 8], float)
    - np.array 함수를 활용해 배열 생성 -> ndarray
    - 하나의 데이터 type만 배열에 넣을 수 있음
    - list와 가장 큰 차이점 -> Dynamic typing not supported
    - C의 Array를 사용하여 배열 생성 -> 속도가 매우 빠름
    - type(test_array[3]) -> numpy.float64 (하나의 데이터가 차지하는 공간이 64bit)
    
    # test_array.dtype
      - numpy array의 데이터 type을 반환
      - 일반적으로 numpy.float64
      - test_array = np.array([1, 4, 5, 8], np.float32) -> numpy.float32

    # Array dtype
      - ndarray object의 메모리 크기를 반환
      - np.array([1, 4, 5, 8], dtype = np.float32).nbytes -> 16

    # test_array.shape
      - numpy array object의 dimension 구성을 반환함
      - Array (vector, matrix, tensor)의 크기, 형태 등에 대한 정보
      
      > Array shape (vector)
        - test_array = np.array([1, 4, 5, 8], float) -> (4,)
      > Array shape (matrix)
        - test_array = np.array([[1, 4, 5, 8]], float) -> (1,4)
      > Array shape (3rd order tensor)
        - tensor = [[[1, 2, 5, 8], [1, 2, 5, 8], [1, 2, 5, 8]],
                    [[1, 2, 5, 8], [1, 2, 5, 8], [1, 2, 5, 8]],
                    [[1, 2, 5, 8], [1, 2, 5, 8], [1, 2, 5, 8]],
                    [[1, 2, 5, 8], [1, 2, 5, 8], [1, 2, 5, 8]]] -> (4,3,4)
        - ndim (number of dimension)
        - np.array(tensor, int).ndim -> 3
        - size (data의 개수)
        - np.array(tensor, int).size -> 48

    # test_array.reshape
      - Array의 shape 크기를 변경함 (element 갯수는 동일)
      - element의 갯수를 정확히 알지 못할 때 -> reshape(-1,2)

    # flatten
      - 다차원 array를 1차원 array로 변경

  3) Indexing & slicing
    # Indexing
      - List와 달리 이차원 배열에서 [0,0]과 같은 표기법을 제공
      - Matrix 일경우 앞은 row 뒤는 column을 의미

    # slicing
      - List와 달리 행과 열 부분을 나눠서 slicing이 가능
      - Matrix의 부분 집합을 추출할 때 유용
      - [시작:끝:스탭]

  4) creation function
    # arange
      - array의 범위를 지정하여, 값의 list를 생성하는 명령어
      - 0. -> .tolist -> 0.0

    # zeros & ones
      - 0(또는 1)으로 가득찬 ndarray 생성
      - np.zeros(shape, dtype, order) / np.ones(shape, dtype, order)

    # empty (잘 사용X)
      - shape만 주어지고 비어있는 ndarray 생성

    # something_like (딥 러닝에서 사)
      - 기존 ndarray의 shape 크기 만큼 1, 0 또는 empty array를 반환

    # identity
      - 단위 행렬(i행렬)을 생성

    # eye
      - 대각선이 1인 행렬, k값의 시작 index의 변경이 가능
      - np.eye(3, 5, k = 2) -> k : start index
      - np.eye(N = 3, M = 5, dtype = np.int8)

    # diag
      - 대각 행렬의 값을 추출함
      - k : start index

    # random sampling
      - 데이터 분포에 다른 sampling으로 array 생성
      - np.random.uniform(0, 1, 10).reshape(2, 5) -> 균등분포
      - np.random.normal(0, 1, 10).reshape(2, 5) -> 정규분포

  5) operation functions
    # sum
      - ndarray의 element들 간의 합을 구함 (list의 sum기능과 동일)
      > axis
        - 모든 operation function을 실행할 때, 기준이 되는 dimension
      - .sum(axis = 0) -> row / .sum(axis = 1) -> column / .sum(axis = 2)

    # mean & std
      - ndarray의 element들 간의 평균 또는 표준 편차를 반환

    # concatenate (속도가 느려짐 -> 이 기능을 위해 Numpy를 사용X)
      - Numpy array를 합치는 함수
      - np.vstack((a,b)) / np.hstack((a,b))
      - np.concatenate((a,b), axis = 0) / np.concatenate((a,b), axis = 1)

  6) array operations
    - Numpy는 array간의 기본적인 사칙 연산을 지원함
    - Matlab의 .* 과 python의 * 은 같은 기능을 함 (크기가 같아야 함)
    - Matlab의 * 과 python의 a.dot(b) 은 같은 기능을 함 -> Matrix의 기본 연산

    # transpose
      - transpose 또는 T attribute 사용
      - test_a.transpose() / test_a.T

    # broadcasting
      - shape이 다른 배열 간 연산을 지원하는 기능

  7) comparisons
    # All & any
      - all은 전체 element가 만족 true / false
      - any는 element 하나라도 만족 true / 전체 element가 불만족 false

    # logical (잘 사용X)
      - logical_and(a, b) / logical_not(a) / logical_or(a, b)

    # np.where
      - np.where(조건문, true일때 값, flase일때 값)
      - np.where(조건문) -> true인 경우 index로 반환
      - np.NaN / np.Inf
      - np.isnan(a) -> None값 true / np.isfinite(a) -> 유한 수 true

    # argmax & argmin
      - array내 최대값 또는 최소값의 index를 반환함
      - axis 사용가능

    # boolean index
      - numpy 배열은 특정 조건에 따른 값을 배열 형태로 추출 할 수 있음
      - Comparison operation 함수들도 모두 사용가능
      - test_array = np.array([1, 4, 0, 2, 3, 8, 9, 7], float)
      - test_array > 3 -> array([False, True, False, False, False, True, True, True], dtype = bool)
      - test_array[test_array > 3] -> 조건이 True인 index의 element만 추출
      - B.astype(np.int) -> element를 int형으로 변환

    # fancy index
      - numpy array를 index value로 사용해서 값을 추출하는 방법
      - a = np.array([2, 4, 6, 8], float)
      - b = np.array([0, 0, 1, 3, 2, 1], int)
      - a[b] -> array([2., 2., 4., 8., 6., 4.])
      - a. take(b) <권장>
